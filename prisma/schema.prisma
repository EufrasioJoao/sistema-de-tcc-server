generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



enum UserRoles {
  ADMIN
  SISTEM_MANAGER
  COURSE_COORDENATOR
  ACADEMIC_REGISTER
}

enum FileType {
  PDF
  SPREADSHEET
  DOCUMENT
}

enum AccessHistoryAction {
  VIEW_FILE
  DOWNLOAD_FILE
  EDIT_FILE
  UPLOAD_FILE
}

enum TccType {
  BACHELOR
  MASTER
  DOCTORATE
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}





model User {
  id             String                     @id @default(uuid())
  first_name     String
  last_name      String
  email          String                  @unique 
  phone_number   String?
  password       String
  role           UserRoles           @default(ADMIN)
  is_active      Boolean                 @default(true)
  last_login_at  DateTime?
  created_at     DateTime                @default(now())
  updated_at     DateTime                @updatedAt
  deleted_at     DateTime?  

  files           File[]
  file_access_history AccessHistory[]
  coordinated_courses Course[]               @relation("CourseCoordinator")
  search_history      SearchHistory[]        @relation("UserSearchHistory")

  @@map("users")
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])

  @@index([organization_id])
}



model Organization {
  id              String       @id @default(uuid())
  name            String
  email           String?   @unique 
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at     DateTime? 
  city            String?
  state           String?
  UsedStorage     Float?    @default(0)

  files            File[]
  users           User[] 

  @@map("organization")
}








model File {
  id                      String                  @id @default(uuid())
  filename                String
  displayName             String
  size                    String 
  type                    FileType
  path                    String?                 @db.Text
  organization_id         String
  uploaded_by             String
  created_at              DateTime                @default(now())
  updated_at              DateTime                @updatedAt
  deleted_at              DateTime? 
  
  access_history          AccessHistory[]
  organization            Organization                  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  uploader                User               @relation(fields: [uploaded_by], references: [id])
  tcc                     TCC?                    @relation("TCCFile")
  defenseRecordForTcc     TCC?                    @relation("DefenseRecordFile")

  @@index([organization_id], map: "organization_id_fkey")
  @@index([uploaded_by], map: "files_uploaded_by_fkey")
  @@map("files")
}



model AccessHistory {
  id               String    @id @default(uuid())
  accessed_by      String
  file_id          String?
  accessed_at      DateTime?
  action_performed AccessHistoryAction
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  user             User     @relation(fields: [accessed_by], references: [id], onDelete: Cascade)
  file             File?      @relation(fields: [file_id], references: [id], onDelete: Cascade)

  @@index([accessed_by], map: "access_history_accessed_by_fkey")
  @@index([file_id], map: "access_history_file_id_fkey")
  @@map("access_history")
}

model Course {
  id            String    @id @default(uuid())
  name          String
  coordinatorId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? 

  coordinator User?     @relation("CourseCoordinator", fields: [coordinatorId], references: [id])
  students    Student[]
  tccs        TCC[]

  @@index([coordinatorId])
  @@map("courses")
}

model Student {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  email         String    @unique
  studentNumber String    @unique
  courseId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? 

  course Course @relation(fields: [courseId], references: [id])
  tccs   TCC[]

  @@index([courseId])
  @@map("students")
}

model TCC {
  id                   String    @id @default(uuid())
  title                String
  year                 Int
  keywords             String?
  type                 TccType
  authorId             String
  courseId             String
  fileId               String    @unique
  defenseRecordFileId  String?   @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime? 

  author              Student @relation(fields: [authorId], references: [id])
  supervisor          String?
  course              Course  @relation(fields: [courseId], references: [id])
  file                File    @relation("TCCFile", fields: [fileId], references: [id])
  defenseRecordFile   File?   @relation("DefenseRecordFile", fields: [defenseRecordFileId], references: [id])

  @@index([authorId])
  @@index([courseId])
  @@map("tccs")
}

model SearchHistory {
  id           String   @id @default(uuid())
  query        String
  userId       String
  resultsCount Int
  createdAt    DateTime @default(now())

  user User @relation("UserSearchHistory", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("search_history")
}

model Backup {
  id            String       @id @default(uuid())
  filename      String
  s3_key        String       @unique
  s3_url        String?
  file_size     BigInt?
  status        BackupStatus @default(PENDING)
  error_message String?      @db.Text
  started_at    DateTime     @default(now())
  completed_at  DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  @@index([status])
  @@index([started_at])
  @@map("backups")
}



